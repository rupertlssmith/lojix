/*
 * Copyright The Sett Ltd, 2005 to 2014.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.thesett.common.swing.workpanel;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.JButton;
import javax.swing.JPanel;

/**
 * ButtonPanel displays a panel consisting of OK, Cancel and Apply buttons.
 *
 * <p>An ActionListener can register itself with ButtonPanel and it will be sent all of the Ok, Cancel and Apply actions
 * that the ButtonPanel generates.
 *
 * <p>ButtonPanel is intended to be used closely with {@link WorkPanel}s. A work panel can be registered with a button
 * panel in which case the work panel will be sent the action events from the buttons and the button panel will listen
 * for changes to the work panels state and enable or disable its buttons accordingly.
 *
 * <pre><p/><table id="crc"><caption>CRC Card</caption>
 * <tr><th>Responsibilities<th>Collaborations
 * <tr><td>Build user interface
 * <tr><td>Register listener for Ok, Cancel and Apply actions
 * <tr><td>Enable or disable buttons depending on work panel state <td> {@link WorkPanelState}
 * </table></pre>
 *
 * @author Rupert Smith
 */
public class ButtonPanel extends JPanel implements PropertyChangeListener
{
    /** Used for logging. */
    /* private static final Logger log = Logger.getLogger(ButtonPanel.class.getName()); */

    /** Holds the OK button. */
    private JButton okButton = new JButton("OK");

    /** Holds the Cancel button. */
    private JButton cancelButton = new JButton("Cancel");

    /** Holds the Apply button. */
    private JButton applyButton = new JButton("Apply");

    /** Creates new ButtonPanel. */
    public ButtonPanel()
    {
        initComponents();
    }

    /**
     * Called when a property in the WorkPanelState is changed. This method calls initPanels to rebuild the user
     * interface to reflect the current application state.
     *
     * @param event The work panel state change event. All other event types are ignored.
     */
    public void propertyChange(PropertyChangeEvent event)
    {
        /*log.fine("void propertyChange(PropertyChangeEvent): called");*/

        // Check that the property change was sent by a WorkPanelState
        if (event.getSource() instanceof WorkPanelState)
        {
            // Get the state
            String state = ((WorkPanelState) event.getSource()).getState();

            // Check what the state to set is
            if (state.equals(WorkPanelState.NOT_SAVED))
            {
                // Set the Cancel and Apply buttons to enabled
                cancelButton.setEnabled(true);
                applyButton.setEnabled(true);
            }
            else if (state.equals(WorkPanelState.READY))
            {
                // Set the Cancel and Apply buttons to disabled
                cancelButton.setEnabled(false);
                applyButton.setEnabled(false);
            }
            else if (state.equals(WorkPanelState.NOT_INITIALIZED))
            {
                // Disable all the buttons
                okButton.setEnabled(false);
                cancelButton.setEnabled(false);
                applyButton.setEnabled(false);
            }
        }
    }

    /**
     * Sets the specified work panel to listen to the button press events for all of the OK, Cancel and Apply buttons.
     * Regisers this object to listen for changes to the work panels state.
     *
     * @param panel The work panel to register with.
     */
    public void registerWorkPanel(WorkPanel panel)
    {
        // Set the work panel to listen for actions generated by the buttons
        okButton.addActionListener(panel);
        cancelButton.addActionListener(panel);
        applyButton.addActionListener(panel);

        // Register this to listen for changes to the work panels state
        panel.getWorkPanelState().addPropertyChangeListener(this);
    }

    /** Creates the buttons. */
    private void initComponents()
    {
        // Add the buttons to this panel
        add(okButton);
        add(cancelButton);
        add(applyButton);
    }
}
