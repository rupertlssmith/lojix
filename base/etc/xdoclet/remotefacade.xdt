/* Copyright Rupert Smith, 2005, all rights reserved. */
package <XDtPackage:packageOf><XDtEjbFacade:remoteFacadeClass/></XDtPackage:packageOf>;

import java.util.*;
import java.rmi.RemoteException;
import javax.ejb.CreateException;

import uk.co.thebadgerset.common.locator.*;

/**
 * This class is a service delegate to <XDtEjb:ejbName/>. It provides a convenient way to access the session bean without
 * exposing that the underlying implementation is remote or is a session bean.
 *
 * <p/>The methods may delegate to a remote implementation but the remoteness will not be exposed to the caller because
 * any remote exceptions will be wrapped in a {@link uk.co.thebadgerset.common.locator.ServiceFailureException} which is 
 * a runtime exception. In this way services are always called as if they are running locally. On the other hand, since 
 * services are found using a service locator they may well be running locally, depending on the deployment context
 * of the caller.
 *
 * <p/>The underlying service that is actually called depends on the capabilities exposed by the service locator
 * provided by the service locator factory which depends on the deployment context configuration that the application
 * is using. This service facade will attempt to make use of service deployment types in the following order of 
 * preference: local ejb calls, remote ejb calls, webservice calls. This preference order is in part expressed at
 * compile time and in part checked at runtime. The compile time determination is made depending on what interface
 * a session bean method has chosen to expose, local, remote or endpoint (webservice). For example, if only remote
 * is exposed then the class generated from this template will only attempt to call by remote ejb call. If multiple
 * interfaces are exposed the service locator will be queried at runtime to determine what interfaces are actually
 * available to call from the deployment context. For example if a session bean exposes local and remote but the 
 * context of the caller is remote the service locator will indicate this and only the remote interface will be called.
 * Webservice interface are only ever called when no remote ejb interface is available. Remote ejb interfaces are
 * always called in preference to webservice interfaces because they do not require the call to be serialized and
 * de-serialized using XML, so are more efficient. To explicitly use webservice calls in preference to remote ejb
 * calls, do not set up the remote ejb calls in the deployment context configuration.
 *
 * <p/>This facade can provide caching of the results of calling methods on the underlying service. This depends on
 * the xdoclet caching flag being set on the session bean to enable this. This can be used in situations where return
 * values are known to be suitable for caching, such as read only values or values that are known to not change
 * until some invariant condition is broken. Listeners can attach to this facade and will be notified whenever the
 * cache is invalidated. When conditions are right, caching can save a remote call from being made.
 *
 * <p/><table id="crc"><caption>CRC Card</caption>
 * <tr><th> Responsibilities <th> Collaborations
 * <tr><td> Delegate to the real service implementation.
 * <tr><td> Provide cache management of the return values of remote service methods.
 * <tr><td> Notify listeners of cache resets.
 * </table>
 *
 * @todo Change the default name to remove the Remote ending. Delegate, Service, ServiceImpl or Facade would make a
 *       better class name ending.
 *
 * @author Rupert Smith (author of XDoclet code generation template that generated this class)
<XDtClass:classCommentTags indent="0"/> */
public class <XDtClass:classOf><XDtEjbFacade:remoteFacadeClass/></XDtClass:classOf> extends Observable <XDtClass:ifHasClassTag tagName="ejb:bean" paramName="local-business-interface">implements <XDtClass:classTagValue tagName="ejb:bean" paramName="local-business-interface"/></XDtClass:ifHasClassTag>
{
    /** The singleton instance of this facade. */
    static <XDtClass:classOf><XDtEjbFacade:remoteFacadeClass/></XDtClass:classOf> _instance = null;

    <XDtEjbIntf:ifRemoteEjb>
    /** Used to hold the cached remote session interface. */
    <XDtEjbIntf:componentInterface type="remote"/> _session = null;
    </XDtEjbIntf:ifRemoteEjb>

    <XDtEjbIntf:ifLocalEjb>
    /** Used to hold the cached local session interface. */
    <XDtEjbIntf:componentInterface type="local"/> _localSession = null;
    </XDtEjbIntf:ifLocalEjb>

    <XDtClass:ifHasClassTag tagName="ejb:interface" paramName="service-endpoint-class">
    /** Used to hold the cached webservice endpoint proxy. */
    <XDtEjbIntf:componentInterface type="service-endpoint"/> _endpointSession = null;
    </XDtClass:ifHasClassTag>

    /**
     * Gets the singleton instance of this class. This method is synchronized to ensure that mutliple threads
     * can never cause the creation of multiple singletons.
     */
    public synchronized static <XDtClass:classOf><XDtEjbFacade:remoteFacadeClass/></XDtClass:classOf> getInstance()
    {
        if(_instance == null)
        {
            _instance = new <XDtClass:classOf><XDtEjbFacade:remoteFacadeClass/></XDtClass:classOf>();
        }
        return _instance;
    }

    <XDtEjbIntf:ifRemoteEjb>
    /**
     * Determines whether the service locator is able to provide a remote interface to the underlying session bean.
     */
    public boolean supportsRemote()
        throws ServiceFailureException
    {
        ServiceLocator locator = ServiceLocatorFactory.getInstance().getServiceLocator("");
        return locator.supportsRemote(<XDtEjbHome:homeInterface type="remote"/>.JNDI_NAME, <XDtEjbHome:homeInterface type="remote"/>.class);
    }

    /**
     * Gets a reference to the remote session interface.
     *
     * <p>This method can throw {@link uk.co.thebadgerset.common.error.UserReadableException}s. The error keys it may return are:
     * <ul><li>error.internalerror</li></ul>
     *
     * @todo Caching the remote interface may not be a good idea as it could time out. Better to cache the handle because
     * this is the only robust way to keep references to remote objects. On the other hand if caching the remote interface
     * always works then its ok to keep doing it. The handle implementation may include logic to dereference itself quickly
     * when the remote reference is still live? Alternatively, a more sophisticated method could be written here that caches
     * the remote reference and the handle. If the remote reference fails to resolve then the handle is dereferenced to get
     * a fresh remote reference.
     *
     * @return The remote interface of the underlying implementation of this service. 
     * @throws ServiceFailureException if there is an error locating the service through the service locator
     *  or if there is a class not found, create or remote exception during lookup and creation of the service.
     */
    protected <XDtEjbIntf:componentInterface type="remote"/> getSession()
        throws ServiceFailureException
    {
        // Check if a remote session is already cached and create a new one if not
        if(_session == null) 
        {
            // Use a try block as looking up the remote class to narrow to may cause class not found exceptions and
            // session creation can throw create or remote exceptions.
            try
            {
                // Use the service locator to find the home object
                ServiceLocator locator = ServiceLocatorFactory.getInstance().getServiceLocator("");
                <XDtEjbHome:homeInterface type="remote"/> home = 
                    (<XDtEjbHome:homeInterface type="remote"/>)
                    locator.getEJBHome(<XDtEjbHome:homeInterface type="remote"/>.class);

                // Create a reference to the session object
                _session = home.create();
            }
            // Recast any class not found exceptions as service failure exceptions
            /*
            catch (ClassNotFoundException e)
            {
                throw new ServiceFailureException("A class not found exception occured during look up of the " +
                                                  "<XDtEjbIntf:componentInterface type="remote"/> class to cast " +
                                                  "the remote session to.", e,
                                                  "error.internalerror", null);
            }
            */
            // Recast any remote exceptions as service failure exceptions
            catch (RemoteException re)
            {
                throw new ServiceFailureException("A remote exception occured during creation of the session bean " +
                                                  "<XDtEjbIntf:componentInterface type="remote"/>.", re,
                                                  "error.internalerror", null);  
            }
            // Recast any create exceptions as service failure exception
            catch (CreateException ce)
            {
                throw new ServiceFailureException("A create exception occured during creation of the session bean " +
                                                  "<XDtEjbIntf:componentInterface type="remote"/>", ce,
                                                  "error.internalerror", null);  
            }
        }

        return _session;
    }
    </XDtEjbIntf:ifRemoteEjb>

    <XDtEjbIntf:ifLocalEjb>
    /**
     * Determines whether the service locator is able to provide a local interface to the underlying session bean.
     */
    public boolean supportsLocal()
        throws ServiceFailureException
    {
        ServiceLocator locator = ServiceLocatorFactory.getInstance().getServiceLocator("");
        return locator.supportsLocal(<XDtEjbHome:homeInterface type="local"/>.JNDI_NAME, <XDtEjbHome:homeInterface type="local"/>.class);
    }

    /**
     * Gets a reference to the local session interface.
     *
     * <p>This method can throw {@link uk.co.thebadgerset.common.error.UserReadableException}s. The error keys it may return are:
     * <li>error.internalerror</li>
     *
     * @return The local interface of the underlying implementation of this service.
     *
     * @throws ServiceFailureException if there is an error locating the service through the service locator
     *         or if there is a class not found, create or remote exception during lookup and creation of the service.
     * @throws ServiceDoesNotSupportLocalInterfaceException as specialiation of the service failure exception
     *         this will be thrown when the reason for failure is that the local interface cannot be reached. This exception
     *         condition is used by the delegated methods as an indication to retry with the remote interface.
     */
    protected <XDtEjbIntf:componentInterface type="local"/> getLocalSession()
        throws ServiceFailureException
    {
        // Check if a remote session is already cached and create a new one if not
        if(_localSession == null) 
        {
            // Use the service locator to find the local home object
            ServiceLocator locator = ServiceLocatorFactory.getInstance().getServiceLocator("");
            <XDtEjbHome:homeInterface type="local"/> home =
                (<XDtEjbHome:homeInterface type="local"/>)
                locator.getEJBLocalHome(<XDtEjbHome:homeInterface type="local"/>.class);

            // Use a try block as local session creation can throw create exceptions
            try
            {
                // Create a reference to the session object
                _localSession = home.create();
            }
            // Recast any create exceptions as service failure exception
            catch (CreateException ce)
            {
                throw new ServiceFailureException("A create exception occured during creation of the session bean " +
                                                  "<XDtEjbIntf:componentInterface type="local"/>", ce,
                                                  "error.internalerror", null);  
            }
        }

        return _localSession;
    }
    </XDtEjbIntf:ifLocalEjb>

    <XDtClass:ifHasClassTag tagName="ejb:interface" paramName="service-endpoint-class">
    /**
     * Determines whether the service locator is able to provide a webservice interface to the underlying session bean.
     */
    public boolean supportsWebservice()
        throws ServiceFailureException
    {
        ServiceLocator locator = ServiceLocatorFactory.getInstance().getServiceLocator("");
        return locator.supportsWebservice(<XDtClass:classTagValue tagName="ejb:bean" paramName="local-business-interface"/>.class.getName());
    }

    /**
     * Gets a reference to the webservice endpoint interface.
     *
     * <p>This method can throw {@link uk.co.thebadgerset.common.error.UserReadableException}s. The error keys it may
     * return are:
     * <ul><li>error.internalerror</li></ul>
     *
     * @return The webservice endpoint interface of the underlying implementation of this service.
     *
     * @throws ServiceFailureException If there is an error locating the service through the service locator
     *                                 or if there is a class not found, create or remote exception during lookup
     *                                 and creation of the service.
     */
    protected <XDtEjbIntf:componentInterface type="service-endpoint"/> getEndpointSession()
        throws ServiceFailureException
    {
        // Check if a webservice proxy for the service is already cached and create a new one if not.
        if(_endpointSession == null) 
        {
            //try
            //{
                // Use the service locator to find the endpoint proxy.
                ServiceLocator locator = ServiceLocatorFactory.getInstance().getServiceLocator("");
                _endpointSession = /*<<XDtEjbIntf:componentInterface type="service-endpoint"/>>*/ locator.getServiceEndpoint(<XDtEjbIntf:componentInterface type="service-endpoint"/>.class);
            //}
            // Recast any class not found exceptions as service failure exceptions
            /*
            catch (ClassNotFoundException e)
            {
                throw new ServiceFailureException("A class not found exception occured during look up of the " +
                                                  "<XDtEjbIntf:componentInterface type="remote"/> class to cast " +
                                                  "the remote session to.", e,
                                                  "error.internalerror", null);
            }
            */
            // Recast any remote exceptions as service failure exceptions
            /*
            catch (RemoteException re)
            {
                throw new ServiceFailureException("A remote exception occured during creation of the session bean " +
                                                  "<XDtEjbIntf:componentInterface type="remote"/>.", re,
                                                  "error.internalerror", null);  
            }
            */
            // Recast any create exceptions as service failure exception
            /*
            catch (CreateException ce)
            {
                throw new ServiceFailureException("A create exception occured during creation of the session bean " +
                                                  "<XDtEjbIntf:componentInterface type="remote"/>", ce,
                                                  "error.internalerror", null);  
            }
            */
        }

        return _endpointSession;
    }
    </XDtClass:ifHasClassTag>

    <XDtMethod:forAllMethods>
     <XDtEjbIntf:ifIsInterfaceMethod superclasses="false" interface="remote">
      <XDtMethod:ifHasMethodTag tagName="ejb.facade-method">   
       <XDtMethod:ifIsNotOfType type="void">
        <XDtMethod:ifMethodTagValueEquals tagName="ejb.facade-method" paramName="cache" value="true">
         <XDtType:ifIsPrimitive value="<XDtMethod:methodType/>">
    /** Used to hold the cached return value of _<XDtMethod:methodName/>. */
    <XDtMethod:methodType/> _<XDtMethod:methodName/>Cached;

    /** Used to indicate whether or not the cached return value of _<XDtMethod:methodName/> has been set. */
    boolean _<XDtMethod:methodName/>WasSet = false;    
         </XDtType:ifIsPrimitive>
         <XDtType:ifIsNotPrimitive value="<XDtMethod:methodType/>">
    /** Used to hold the cached return value of _<XDtMethod:methodName/>. */
    <XDtMethod:methodType/> _<XDtMethod:methodName/>Cached = null;
           </XDtType:ifIsNotPrimitive>
          </XDtMethod:ifMethodTagValueEquals>
       </XDtMethod:ifIsNotOfType>

    /**
     * Private helper method that absracts out the local/remote/webservice nature of the method call.
     *
     * <p>If the method is declared in the local interface for the service and if the service locator can provide
     * access to the local interface from the calling context then this method will try to call the service locally.
     * If this fails because of the unavailability of the local interface (but not for other reasons) then this
     * method will try again using the remote interface, provided that is available. In this way this delegate always
     * tries to use the fastest method available to it.
     *
     * <p>It also means that without a fully configured service locator this delegate will still do its best to reach
     * the service implementation by trying both possible interfaces through their XDoclet configured JNDI names.
     * Failure to find the local JNDI name means a wasted call that a properly configured application can optimize out
     * but it saves on configuration effort by not requiring the service locator to be properly configured in many
     * cases.
     */
    private <XDtMethod:methodType/> <XDtMethod:methodName/>LocalRemoteAbstractor(<XDtParameter:parameterList/>)
      <XDtEjbIntf:ifRemoteEjb>
        <XDtMethod:exceptionList append="uk.co.thebadgerset.common.locator.ServiceFailureException, RemoteException" skip="javax.ejb.EJBException"/>
      </XDtEjbIntf:ifRemoteEjb>
      <XDtEjbIntf:ifNotRemoteEjb>
        <XDtMethod:exceptionList skip="javax.ejb.EJBException"/>
      </XDtEjbIntf:ifNotRemoteEjb>
    {
        <XDtEjbIntf:ifLocalEjb>
        // Check if the local interface is available to the service locator from this calling context
        if (supportsLocal())
        {
            // Use a try block so that ServiceDoesNotSupportLocalInterfaceException can be detected
            try
            {
                // Delegate this method to the real service local implementation.
                <XDtMethod:ifIsNotOfType type="void">return </XDtMethod:ifIsNotOfType>getLocalSession().<XDtMethod:methodName/>(<XDtParameter:parameterList includeDefinition="false"/>);
                <XDtMethod:ifIsOfType type="void">return;</XDtMethod:ifIsOfType>
            }
            // Catch local interface not supported exception but let everything else fall through, this is
            // the only exception condition under which a retry is permissible
            catch (ServiceDoesNotSupportLocalInterfaceException e)
            {
                // Allow execution to continue for a possible attempt at making the call through the remote
                // interface if that is available.
                //log.warn("Tried to call through its local interface but this was not available.", e);
            }
        }
        </XDtEjbIntf:ifLocalEjb>

        <XDtEjbIntf:ifRemoteEjb>
        // Check if the remote interface is available to the service locator from this calling context
        <XDtEjbIntf:ifLocalEjb>
        // If execution reaches this point then an unsuccesful local call may have been attempted but failed because the
        // local interface is not acessible. An attempt to call through the remote interface will now be made.
        </XDtEjbIntf:ifLocalEjb>
        if (supportsRemote())
        {
            // Delegate this method to the real service remote implementation.
            <XDtMethod:ifIsNotOfType type="void">return </XDtMethod:ifIsNotOfType>getSession().<XDtMethod:methodName/>(<XDtParameter:parameterList includeDefinition="false"/>);
            <XDtMethod:ifIsOfType type="void">return;</XDtMethod:ifIsOfType>
        }
        </XDtEjbIntf:ifRemoteEjb>
        
        <XDtClass:ifHasClassTag tagName="ejb:interface" paramName="service-endpoint-class">
         <XDtEjbIntf:ifLocalEjb>
        // If execution reaches this point then an unsuccesful local call may have been attempted but failed because the
        // local interface is not acessible. An attempt to call through the remote interface will now be made.

        // This point will also only be reached if no ejb remote interface is available to call. Ejb remote calls
        // are always taken in preference to webservice calls because they do not require the serialization of the
        // call into XML and deserialization at the other end, so are more efficient.
         </XDtEjbIntf:ifLocalEjb>
        if (supportsWebservice())
        {
            // Delegate this method to the real service remote implementation.
            <XDtMethod:ifIsNotOfType type="void">return </XDtMethod:ifIsNotOfType>getEndpointSession().<XDtMethod:methodName/>(<XDtParameter:parameterList includeDefinition="false"/>);
            <XDtMethod:ifIsOfType type="void">return;</XDtMethod:ifIsOfType>
        }
        </XDtClass:ifHasClassTag>

        // If execution has reached this point because no exceptions have been raised, then the service locator has
        // not been able to supply an interface for the service for the desired method for either local or remote calls.
        // Report this as a service failure exception.
        throw new ServiceFailureException("No local, remote or webservice interfaces are available, " + 
                                          "cannot reach the service.", null, "error.internal", null);
    }

    /**
     * This is a facade method that delegates to the real service implementation.
     *
     * <p>This method can throw {@link uk.co.thebadgerset.common.error.UserReadableException}s. The error keys it may return are:
     * <li>error.internalerror</li>
     *
     * @throws ServiceFailureException if for some reason the service cannot be found, there is a security violation or
     *         fails during remote access then the underlying exception is wrapped in a service failure exception. This is a 
     *         {@link uk.co.thebadgerset.common.error.UserReadableException} and as such the error keys are implicitly part of the
     *         public interface of this class. See above for a description of the possible error keys.
     */
    public <XDtMethod:methodType/> <XDtMethod:methodName/>(<XDtParameter:parameterList/>)
          <XDtMethod:exceptionList skip="javax.ejb.EJBException"/>
    {
        <XDtMethod:ifIsOfType type="void">
        // This is a void method so there is no return type that could be cached.
        // Use a try block as remote access may fail
        try
        {
            <XDtMethod:methodName/>LocalRemoteAbstractor(<XDtParameter:parameterList includeDefinition="false"/>);
        }
        // Catch any remote exceptions and rethrow them as service failure exceptions to hide the remoteness of the service
        // implementation.
        catch (RemoteException re)
        {
            throw new ServiceFailureException("There was a remote exception during access to the service implementation",
                                              re, "error.internalerror", null);
        }

            <XDtMethod:ifMethodTagValueEquals tagName="ejb.facade-method" paramName="invalidate" value="true">
        // Cache invalidation was set in the XDoclet tags for this method. Clear any cached method results.
        invalidate();
         </XDtMethod:ifMethodTagValueEquals>
        </XDtMethod:ifIsOfType>
        <XDtMethod:ifIsNotOfType type="void">
        // Used to hold the real service implementation methods return value.
        <XDtMethod:methodType/> retval;

         <XDtMethod:ifMethodTagValueEquals tagName="ejb.facade-method" paramName="cache" value="true">
        // This is a cached method.
          <XDtType:ifIsPrimitive value="<XDtMethod:methodType/>">
        // Synchronize on this to ensure that the cache is not modified concurrently
        synchronized(this) 
        {
            // Check that the methods return value has not already been cached.
            if(!_<XDtMethod:methodName/>WasSet)
            {
                try
                {
                    // There is not already a cached result so call the real service implementation.
                    _<XDtMethod:methodName/>Cached = <XDtMethod:methodName/>LocalRemoteAbstractor(<XDtParameter:parameterList includeDefinition="false"/>);
                }
                // Catch any remote exceptions and rethrow them as service failure exceptions to hide the remoteness
                // of the service implementation.
                catch (RemoteException re)
                {
                    throw new ServiceFailureException("There was a remote exception during access to the " +
                                                      "service implementation", re, "error.internalerror", null);
                }
                
                // Set the cache flag to indicate that a cached result has been stored.
                <XDtMethod:methodName/>WasSet = true;
            }

            // Take the return value from the cache (if the cache was already set then no call has been made to the real
            // service implementation).
            retval = _<XDtMethod:methodName/>Cached;
        }
          </XDtType:ifIsPrimitive>

          <XDtType:ifIsNotPrimitive value="<XDtMethod:methodType/>">
        // Synchronize on this to ensure that the cache is not modified concurrently
        synchronized(this) 
        {
            // Check that the methods return value has not already been cached.
            if (_<XDtMethod:methodName/>Cached == null)
            {
                try
                {
                    // There is not already a cached result so call the real service implementation.
                    _<XDtMethod:methodName/>Cached = <XDtMethod:methodName/>LocalRemoteAbstractor(<XDtParameter:parameterList includeDefinition="false"/>);
                }
                // Catch any remote exceptions and rethrow them as service failure exceptions to hide the 
                // remoteness of the service implementation.
                catch (RemoteException re)
                {
                    throw new ServiceFailureException("There was a remote exception during access to the " + 
                                                      "service implementation", re, "error.internalerror", null);
                }
            }
            
            // Take the return value from the cache (if the cache was already set then no call has been made to the real
            // service implementation).
            retval = _<XDtMethod:methodName/>Cached;
        }
            </XDtType:ifIsNotPrimitive>
           </XDtMethod:ifMethodTagValueEquals>
      
         <XDtMethod:ifMethodTagValueNotEquals tagName="ejb.facade-method" paramName="cache" value="true">
        // This is an uncached method.
        // Delegate the method call to the real service implementation.
        try
        {
            retval = <XDtMethod:methodName/>LocalRemoteAbstractor(<XDtParameter:parameterList includeDefinition="false"/>);
        }
        // Catch any remote exceptions and rethrow them as service failure exceptions to hide the remoteness of the service
        // implementation.
        catch (RemoteException re)
        {
            throw new ServiceFailureException("There was a remote exception during access to the service implementation",
                                              re, "error.internalerror", null);
        }

            <XDtMethod:ifMethodTagValueEquals tagName="ejb.facade-method" paramName="invalidate" value="true">
        // Cache invalidation was set in the XDoclet tags for this method. Clear any cached method results.
        invalidate();
          </XDtMethod:ifMethodTagValueEquals>
         </XDtMethod:ifMethodTagValueNotEquals>

        return retval;
        </XDtMethod:ifIsNotOfType>
    }
      </XDtMethod:ifHasMethodTag >
     </XDtEjbIntf:ifIsInterfaceMethod>

    </XDtMethod:forAllMethods>

    /**
     * Clears any method return values from the cache and notifies any observers that this has been done.
     */
    public void invalidate()
    {
        // Synchronize on this to prevent concurrent modification of the cache
        synchronized(this)
        {
    <XDtMethod:forAllMethods>
     <XDtEjbIntf:ifIsInterfaceMethod superclasses="false" interface="remote">
      <XDtMethod:ifMethodTagValueEquals tagName="ejb.facade-method" paramName="cache" value="true">
       <XDtMethod:ifMethodTagValueNotEquals tagName="ejb.facade-method" paramName="immutable" value="true">
          <XDtType:ifIsPrimitive value="<XDtMethod:methodType/>">
            // Clear the cached return value for _<XDtMethod:methodName/>
            _<XDtMethod:methodName/>WasSet = false;

          </XDtType:ifIsPrimitive>
          <XDtType:ifIsNotPrimitive value="<XDtMethod:methodType/>">
            // Check if there is a cached return value for _<XDtMethod:methodName/>
            if(_<XDtMethod:methodName/>Cached != null)
            {
                // Clear the cached return value for _<XDtMethod:methodName/>
                _<XDtMethod:methodName/>Cached = null;
            }

          </XDtType:ifIsNotPrimitive>         
       </XDtMethod:ifMethodTagValueNotEquals>
      </XDtMethod:ifMethodTagValueEquals>
     </XDtEjbIntf:ifIsInterfaceMethod>
    </XDtMethod:forAllMethods>
        }

        // Mark this object as having changed
        setChanged();

        // Send a notification to any interested observers that the cache has been cleared
        notifyObservers();
    }
}
