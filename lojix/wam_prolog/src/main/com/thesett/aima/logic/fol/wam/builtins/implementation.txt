=== Cut

neck_cut, easy to insert that correctly.
get_level a little annoying, as needs to be part of the clause prefix instructions. also complicated the assignment of permanent registers.

1. To make the permanent variable allocation algorithm work, during detection of builtins, transform cut into cut(_X), that is a new anonymous variable. This variable will also be of a special type 'DepthVariable'.

2. Make a small change to the permanent variable assignment, which is to detect the DepthVariable in body clauses after the first one, and add it the head/first body variables too. In this way, it will be counted as a permanent variable, and assigned its slot correctly.

3. When assigning the slot to DepthVariable, also update the 'cutParameterVar' field, so that compileClause knows which slot to use and to insert a get_level instruction.

4. Deep cut is detected in the permanent variable analysis phase, so compileClause knows up-front that get_level should be added to the prefix. For compileQuery, environment trimming is not important, so just allocate the get_level variable on every query, and make it the last permanent var (numPerms + 1).

=== Call

When statically calling a predicate, its arguments are built on the heap, and referenced by registers or stack variables. Once this is set up, the predicate is called.

A dynamic call should behave in exactly the same way, so call/1 needs to implement the procedure described above.

When call/1 is invoked, its arguments will already have been created. What is needed is to dereference the argument, find the structure it points to, resolve that as a functor to call (or fail), assign argument registers to the sub-terms of the structure, then make the call.

1. Add a switch for invoking internal functions, and a new instruction call_internal. Built-ins with special internal functions will use this, call_call being one of them.
2. Implement call_call.
  Deref argument.
  Get structure and num args.
  Check that fn exists to call.
  Bind arguments to registers.
  Call it.
3. Recognize call and replace its functor with call_call.

=== Unifies

Create LHS as query parameters.
Create RHS as program parameters.
No call instruction, just run the 2 together.

OR

Implement as:

=(X, X).
\=(X, Y) :- \+(X = Y).

=== Disjunction

Does this complicate permanent register assignment? Yes, but use the same procedure to count the number of permanent
registers, just include nested conjunctive/disjunctive top-level terms in the count.

 Problems with current inline implementations:

 try_me/retry_me Saves the argument registers of the current clause. In the inline case, another clause may have been
called prior to this, in which case num_args is set wrong. Need num_args for this predicate, not any that might have
been called in between.
