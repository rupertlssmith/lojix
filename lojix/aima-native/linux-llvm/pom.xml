<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.thesett</groupId>
    <artifactId>libaima_native</artifactId>
    <name>aima-native-linux-llvm</name>
    <version>0.8.10</version><!--lojix.version-->

    <description>Native implementations for AIMA for Linux.</description>
    <url>https://www.thesett.com/build_reports/lojix/aima-native/linux-llvm</url>

    <packaging>so</packaging>

    <properties>
        <topdir>${basedir}/../..</topdir>
    </properties>

    <parent>
        <groupId>com.thesett</groupId>
        <artifactId>aima-native-build</artifactId>
        <version>0.8.10</version><!--lojix.version-->
        <relativePath>../pom.xml</relativePath>
    </parent>

    <dependencies>

        <!-- This dependency cannot be inherited from the parent pom because it is specifically for the 'tests' classifier. -->
        <dependency>
            <groupId>com.thesett</groupId>
            <artifactId>logic</artifactId>
            <classifier>tests</classifier>
            <version>0.8.10</version><!--lojix.version-->
        </dependency>

        <dependency>
            <groupId>com.thesett</groupId>
            <artifactId>l0</artifactId>
            <classifier>tests</classifier>
            <version>0.8.10</version><!--lojix.version-->
        </dependency>

        <dependency>
            <groupId>com.thesett</groupId>
            <artifactId>l1</artifactId>
            <classifier>tests</classifier>
            <version>0.8.10</version><!--lojix.version-->
        </dependency>

        <dependency>
            <groupId>com.thesett</groupId>
            <artifactId>l2</artifactId>
            <classifier>tests</classifier>
            <version>0.8.10</version><!--lojix.version-->
        </dependency>

        <dependency>
            <groupId>com.thesett</groupId>
            <artifactId>l3</artifactId>
            <classifier>tests</classifier>
            <version>0.8.10</version><!--lojix.version-->
        </dependency>

    </dependencies>

    <build>
        <plugins>

            <!-- Extract headers for native implementations using javah and compile the C code using gcc. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>native-maven-plugin</artifactId>
                <extensions>true</extensions>

                <configuration>

                    <!-- javah options. -->
                    <classNames>
                        <className>
                            com.thesett.aima.logic.fol.l0.L0UnifyingNativeMachine
                        </className>
                        <className>
                            com.thesett.aima.logic.fol.l1.L1UnifyingNativeMachine
                        </className>
                        <className>
                            com.thesett.aima.logic.fol.l2.L2ResolvingNativeMachine
                        </className>
                    </classNames>
                    <javahOS>linux</javahOS>

                    <!-- compiler options. -->
                    <compilerProvider>generic-classic</compilerProvider>
                    <compilerExecutable>llvm-gcc-4.2</compilerExecutable>
                    <compilerStartOptions>
                        <compilerStartOption>-O3</compilerStartOption>
                        <compilerStartOption>-fomit-frame-pointer</compilerStartOption>
                        <compilerStartOption>-fPIC</compilerStartOption>
                        <compilerStartOption>-D_GNU_SOURCE</compilerStartOption>
                        <compilerStartOption>-D__STDC_LIMIT_MACROS</compilerStartOption>
                        <compilerStartOption>-D__STDC_CONSTANT_MACROS</compilerStartOption>
                    </compilerStartOptions>

                    <sources>
                        <!-- Include the native interpreters. -->
                        <source>
                            <directory>../src/c</directory>
                            <includes>
                                <include>l0machine.c</include>
                                <include>l1machine.c</include>
                                <include>trace.c</include>
                            </includes>
                        </source>

                        <!-- Include the llvm based JIT machine. -->
                        <source>
                            <directory>/usr/include</directory>
                        </source>
                        <source>
                            <directory>src/c</directory>
                            <includes>
                                <include>*.cpp</include>
                            </includes>
                        </source>

                    </sources>

                    <!-- linker options. -->
                    <linkerExecutable>g++</linkerExecutable>
                    <linkerStartOptions>
                        <linkerStartOption>-Isrc/c</linkerStartOption>
                        <linkerStartOption>-I../src/c</linkerStartOption>
                        <linkerStartOption>-I/usr/include</linkerStartOption>

                        <linkerStartOption>-D_DEBUG</linkerStartOption>
                        <linkerStartOption>-D_GNU_SOURCE</linkerStartOption>
                        <linkerStartOption>-D__STDC_LIMIT_MACROS</linkerStartOption>
                        <linkerStartOption>-D__STDC_CONSTANT_MACROS</linkerStartOption>
                        <linkerStartOption>-O3</linkerStartOption>
                        <linkerStartOption>-fomit-frame-pointer</linkerStartOption>
                        <linkerStartOption>-fno-exceptions</linkerStartOption>
                        <linkerStartOption>-Woverloaded-virtual</linkerStartOption>
                        <linkerStartOption>-pedantic</linkerStartOption>
                        <linkerStartOption>-Wall</linkerStartOption>
                        <linkerStartOption>-W</linkerStartOption>
                        <linkerStartOption>-Wwrite-strings</linkerStartOption>
                        <linkerStartOption>-Wno-long-long</linkerStartOption>
                        <linkerStartOption>-Wunused</linkerStartOption>
                        <linkerStartOption>-Wno-unused-parameter</linkerStartOption>
                        <linkerStartOption>-O3</linkerStartOption>
                        <linkerStartOption>-Wl,-soname=libaima_native.so</linkerStartOption>
                        <linkerStartOption>-static-libgcc</linkerStartOption>
                        <linkerStartOption>-shared</linkerStartOption>
                    </linkerStartOptions>

                    <linkerEndOptions>
                        <!-- Below config is generated by running: llvm-config -ldflags -libs all -->
                        <linkerEndOption>-L/usr/lib/llvm/lib</linkerEndOption>

                        <linkerEndOption>-lLLVMXCoreCodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMXCoreAsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMXCoreInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMSystemZCodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMSystemZAsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMSystemZInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMSparcCodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMSparcAsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMSparcInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMPowerPCCodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMPowerPCAsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMPowerPCInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMPIC16AsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMPIC16CodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMPIC16Info</linkerEndOption>
                        <linkerEndOption>-lLLVMMSP430CodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMMSP430AsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMMSP430Info</linkerEndOption>
                        <linkerEndOption>-lLLVMMSIL</linkerEndOption>
                        <linkerEndOption>-lLLVMMSILInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMMipsAsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMMipsCodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMMipsInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMLinker</linkerEndOption>
                        <linkerEndOption>-lLLVMipo</linkerEndOption>
                        <linkerEndOption>-lLLVMInterpreter</linkerEndOption>
                        <linkerEndOption>-lLLVMInstrumentation</linkerEndOption>
                        <linkerEndOption>-lLLVMJIT</linkerEndOption>
                        <linkerEndOption>-lLLVMExecutionEngine</linkerEndOption>
                        <linkerEndOption>-lLLVMDebugger</linkerEndOption>
                        <linkerEndOption>-lLLVMCppBackend</linkerEndOption>
                        <linkerEndOption>-lLLVMCppBackendInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMCellSPUCodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMCellSPUAsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMCellSPUInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMCBackend</linkerEndOption>
                        <linkerEndOption>-lLLVMCBackendInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMBlackfinCodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMBlackfinAsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMBlackfinInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMBitWriter</linkerEndOption>
                        <linkerEndOption>-lLLVMX86AsmParser</linkerEndOption>
                        <linkerEndOption>-lLLVMX86AsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMX86CodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMX86Info</linkerEndOption>
                        <linkerEndOption>-lLLVMAsmParser</linkerEndOption>
                        <linkerEndOption>-lLLVMARMAsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMARMCodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMARMInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMArchive</linkerEndOption>
                        <linkerEndOption>-lLLVMBitReader</linkerEndOption>
                        <linkerEndOption>-lLLVMAlphaCodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMSelectionDAG</linkerEndOption>
                        <linkerEndOption>-lLLVMAlphaAsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMAsmPrinter</linkerEndOption>
                        <linkerEndOption>-lLLVMCodeGen</linkerEndOption>
                        <linkerEndOption>-lLLVMScalarOpts</linkerEndOption>
                        <linkerEndOption>-lLLVMTransformUtils</linkerEndOption>
                        <linkerEndOption>-lLLVMipa</linkerEndOption>
                        <linkerEndOption>-lLLVMAnalysis</linkerEndOption>
                        <linkerEndOption>-lLLVMTarget</linkerEndOption>
                        <linkerEndOption>-lLLVMMC</linkerEndOption>
                        <linkerEndOption>-lLLVMCore</linkerEndOption>
                        <linkerEndOption>-lLLVMAlphaInfo</linkerEndOption>
                        <linkerEndOption>-lLLVMSupport</linkerEndOption>
                        <linkerEndOption>-lLLVMSystem</linkerEndOption>

                        <linkerEndOption>-lpthread</linkerEndOption>
                        <linkerEndOption>-lffi</linkerEndOption>
                        <linkerEndOption>-ldl</linkerEndOption>
                        <linkerEndOption>-lm</linkerEndOption>
                    </linkerEndOptions>

                </configuration>

                <executions>
                    <execution>
                        <id>native-headers</id>
                        <goals>
                            <goal>javah</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>

            <!-- Runs the unit tests with LD_LIBRARY_PATH set to pick up the native shared library. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <systemProperties>
                        <property>
                            <name>log4j.configuration</name>
                            <value>${log4j.configuration}</value>
                        </property>
                    </systemProperties>
                    <environmentVariables>
                        <LD_LIBRARY_PATH>${basedir}/target</LD_LIBRARY_PATH>
                    </environmentVariables>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>