options { DEBUG_PARSER = true; STATIC = false; BUILD_PARSER = false; }

PARSER_BEGIN(MlangParser)

package com.thesett.mlang.parser;

public class MlangParser
{
}

PARSER_END(MlangParser)

/* White space. */
SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

/* Comments. */
SKIP :
{
    "/*" : WITHIN_COMMENT
}

<WITHIN_COMMENT> SKIP :
{
  "*/" : DEFAULT
}

<WITHIN_COMMENT> MORE :
{
  <~[]>
}

/* MLANG Tokens */
TOKEN :
{
    < MODULE: "module" >
  | < IMPORT: "import" >
  | < PRIVATE: "private" >
  | < TABLE: "table" >
  | < INDEX: "index" >
  | < MIN: "min" >
  | < MAX: "max" >
  | < NT: "nt" >
  | < CARDINALITY: "cardinality" >
  | < NOT: "not" >
  | < IF: "if" >
  | < THEN: "then" >
  | < ELSEIF: "elseif" >
  | < ELSE: "else" >
  | < END: "end" >
  | < FOREACH: "foreach" >
  | < WHILE: "while" >
  | < LOOP: "loop" >
  | < TRY: "try" >
  | < CATCH: "catch" >
  | < FINALLY: "finally" >

  | < ATOM: ( <LOCASE> (  <ALPHANUMERIC> )+ ) | <SINGLE_QUOTED_TOKEN> >
  | < VAR: <ANONYMOUS_VARIABLE> | <NAMED_VARIABLE> >
  | < INTEGER_LITERAL: ( <DECIMAL_NUMERAL> | <HEX_NUMERAL> | <OCTAL_NUMERAL> | <BINARY_NUMERAL> ) >
  | < REAL_LITERAL: <DECIMAL_NUMERAL> "." <DECIMAL_NUMERAL> >
  | < STRING_LITERAL: "\"" (<STRING_CHAR> )* "\"" >
  | < OPERATOR: ( "=" | "!=" | ">" | ">=" | "<" | "<=" | "=<" | ".." | "!" |
                     "," | ";" | ":" | "::" | "." | ". " |
                     "=>" | "?=>" | "==" | "!==" | ":=" | "|" | "$" | "@" |
                     "/\\" | "\\/" | "~" | "^" | "<<" | ">>" |
                     "+" | "-" | "*" | "**" | "/" | "/>" | "/<" |
                     "#=" | "#!=" | "#>" | "#>=" | "#<" | "#<=" | "#=<" |
                     "#/\\" | "#\\/" | "#~" | "#^" | "#=>" | "#<=>" |
                     "@>" | "@>=" | "@<" | "@<=" | "@=<" ) >
  | < SEPARATOR: ["(", ")", "{", "}", "[", "]"] >

  | < #ANONYMOUS_VARIABLE: "_" >
  | < #NAMED_VARIABLE: ( "_" ( <ALPHANUMERIC> )+ ) | ( <HICASE> ( <ALPHANUMERIC> )+ ) >
  | < #ALPHANUMERIC: <ALPHA_CHAR> | <DECIMAL_DIGIT> >
  | < #ALPHA_CHAR: "_" | <LETTER> >
  | < #LETTER: <LOCASE> | <HICASE> >
  | < #SINGLE_QUOTED_TOKEN: "'" (<STRING_CHAR> )* "'" >
  | < #STRING_CHAR: ( (~["\""]) | <ESCAPE_SEQUENCE> ) >
  | < #DECIMAL_NUMERAL: <DECIMAL_DIGIT> ( <DECIMAL_DIGITS_AND_UNDERSCORES> )? >
  | < #DECIMAL_DIGITS_AND_UNDERSCORES: ( <DECIMAL_DIGIT_OR_UNDERSCORES> )+ >
  | < #DECIMAL_DIGIT_OR_UNDERSCORES: ( <DECIMAL_DIGIT> | "_" ) >
  | < #HEX_NUMERAL: (( "0x" | "0X" ) <HEX_DIGITS>) >
  | < #HEX_DIGITS: <HEX_DIGIT> ( <HEX_DIGITS_AND_UNDERSCORES> )? >
  | < #HEX_DIGITS_AND_UNDERSCORES: ( <HEX_DIGIT_OR_UNDERSCORES> )+ >
  | < #HEX_DIGIT_OR_UNDERSCORES: ( <HEX_DIGIT> | "_" ) >
  | < #OCTAL_NUMERAL: (( "0o" | "0O" ) <OCTAL_DIGITS>) >
  | < #OCTAL_DIGITS: <OCTAL_DIGIT> ( <OCTAL_DIGITS_AND_UNDERSCORES> )? >
  | < #OCTAL_DIGITS_AND_UNDERSCORES: ( <OCTAL_DIGIT_OR_UNDERSCORES> )+ >
  | < #OCTAL_DIGIT_OR_UNDERSCORES: ( <OCTAL_DIGIT> | "_" ) >
  | < #BINARY_NUMERAL: (( "0b" | "0B" ) <BINARY_DIGITS>) >
  | < #BINARY_DIGITS: <BINARY_DIGIT> ( <BINARY_DIGITS_AND_UNDERSCORES> )? >
  | < #BINARY_DIGITS_AND_UNDERSCORES: ( <BINARY_DIGIT_OR_UNDERSCORES> )+ >
  | < #BINARY_DIGIT_OR_UNDERSCORES: ( <BINARY_DIGIT> | "_" ) >
  | < #EXPONENT_INDICATOR: ["e", "E"] >
  | < #SIGNED_INTEGER: <SIGN> <DECIMAL_NUMERAL> >
  | < #SIGN: ["+", "-"] >
  | < #LOCASE:  ["a"-"z"] >
  | < #HICASE:  ["A"-"Z"] >
  | < #DECIMAL_DIGIT:   ["0" - "9"] >
  | < #HD: <HEX_DIGIT> >
  | < #HEX_DIGIT: ["0"-"9","a"-"f","A"-"F"] >
  | < #OCTAL_DIGIT: ["0" - "7" ] >
  | < #BINARY_DIGIT: ["0", "1"] >
  | < #ESCAPE_SEQUENCE: ( ( "\\b" | "\\t" | "\\n" | "\\f" | "\\r" | "\\\"" | "\\\\" ) | <UNICODE_ESCAPE> ) >
  | < #UNICODE_ESCAPE: ( "\\u" <HD> <HD> <HD> <HD> | "\\U" <HD> <HD> <HD> <HD> <HD> <HD> <HD> <HD> ) >
}